How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    A diff shows all difference between 2 versions of a file, so this makes it
    easy to spot where bugs were introduced.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    You can rollback files to check previous code/features, you don't have to
    keep older versions of a file under a different name.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    A pro would be that you don't necessarily save dead-ends or tryout code.
    But it cuts both ways; you might not commit enough and regretting it later.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Because when programming, multiple files may be related, and hard to 
    understand without each other, e.g. css and html files, or backend
    code with its html form.

How can you use the commands git log and git diff to view the history of files?

    You use git log to find the commit hash of a specific commit, and then you
    can compare 2 commits with 'git diff hash1 hash2' to find their differences.

How might using version control make you more confident to make changes that
could break something?

    You can rollback everything when it breaks, and also track down in what
    commit a bug was introduced ('git log | cat' + 'git checkout' + 'git diff')

Now that you have your workspace set up, what do you want to try using Git for?

    My current software project; a movie subtitle modifier in golang.